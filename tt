package common;import ipm.IPMcomm;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.Statement;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Hashtable;import java.util.List;import java.util.Set;import java.util.concurrent.TimeUnit;import java.util.regex.Matcher;import java.util.regex.Pattern;import org.apache.commons.io.FileUtils;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.xssf.usermodel.XSSFSheet;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import org.openqa.selenium.Alert;import org.openqa.selenium.By;import org.openqa.selenium.Dimension;import org.openqa.selenium.ElementNotVisibleException;import org.openqa.selenium.JavascriptExecutor;import org.openqa.selenium.NoAlertPresentException;import org.openqa.selenium.NoSuchElementException;import org.openqa.selenium.NoSuchFrameException;import org.openqa.selenium.NoSuchWindowException;import org.openqa.selenium.OutputType;import org.openqa.selenium.StaleElementReferenceException;import org.openqa.selenium.TakesScreenshot;import org.openqa.selenium.TimeoutException;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebDriverException;import org.openqa.selenium.WebElement;import org.openqa.selenium.chrome.ChromeDriver;import org.openqa.selenium.chrome.ChromeOptions;import org.openqa.selenium.firefox.FirefoxDriver;import org.openqa.selenium.ie.InternetExplorerDriver;import org.openqa.selenium.interactions.Actions;import org.openqa.selenium.remote.RemoteWebDriver;import org.openqa.selenium.support.ui.ExpectedConditions;import org.openqa.selenium.support.ui.FluentWait;import org.openqa.selenium.support.ui.Select;import org.openqa.selenium.support.ui.Wait;import org.openqa.selenium.support.ui.WebDriverWait;/* * *@author Balamurugan T *  * */public class WebDriverGenerics { public static RemoteWebDriver driver = null; public static WebElement element;  public static List<WebElement> ListofElements; public static HashMap<String, String> hashMap ; public static HashMap<String, String> hashMap_locator ; public static Hashtable<Object, Object> hashTable= new Hashtable<Object, Object>();  public static String actualValue =null; public static String expectedvalue=null; public static Boolean booleanValue =null; public static String ParentWindow=""; public static  List<Object> actualList=new ArrayList<Object>(); public static  List<Object> expectedList=new ArrayList<Object>(); public static Actions act; public static  XSSFWorkbook wb =null; public static  XSSFSheet sh=null; public static  Connection con = null; public static int count = 0; public static boolean testStatus=true; static boolean isTestRunningInIPM = (IPMcomm.importParam("ENGINE") != null   && !IPMcomm.importParam("ENGINE").isEmpty() && IPMcomm.importParam("ENGINE").equals("IPM")); // DB Connection Details //public static String serverName = "fcpsacovn20.ebiz.verizon.com"; //UAT public static String serverName = "fcpsacovn03.ebiz.verizon.com"; // SIT public static String portNumber = "1521"; //public static String serviceName = "vplanuat";//UAT public static String serviceName = "vplansit"; // SIT public static String uniquePlanName; public static String username = ""; public static String password = ""; public static String EXCEPTION_OR_FAILURE_MESG="";//added by bala public static String url = "jdbc:oracle:thin:@//" + serverName + ":" + portNumber + "/" + serviceName; // DB Connection Details public static String columnName, ColVal; @SuppressWarnings("unused") private static List<String> listArray = new ArrayList<String>(); @SuppressWarnings("unused") private static String UserLoginValue = "oneplan"; // private static String UserLoginValue = "vplan"; public static String ApplPropFilePath = "common/Application.properties"; @SuppressWarnings("unused") public static By getElement(String locatorWithValue) {  By locator =null;  String tempLocateBy ="";  String tempLocateValue ="";  if(locatorWithValue.startsWith("id")||locatorWithValue.startsWith("Id"))  {   tempLocateBy ="id";   tempLocateValue=locatorWithValue.split("=")[1];   locator=By.id(tempLocateValue);  }  else if(locatorWithValue.startsWith("name")||locatorWithValue.startsWith("Name"))  {   tempLocateBy ="name";   tempLocateValue=locatorWithValue.split("=")[1];   locator=By.name(tempLocateValue);    }  else if(locatorWithValue.startsWith("classname")||locatorWithValue.startsWith("ClassName"))  {   tempLocateBy ="className";   tempLocateValue=locatorWithValue.split("=")[1];   locator=By.className(tempLocateValue);    }   else if(locatorWithValue.startsWith("//"))  {   tempLocateBy ="Xpath";   tempLocateValue=locatorWithValue;   locator=By.xpath(tempLocateValue);    }  else if(locatorWithValue.startsWith("(//"))  {   tempLocateBy ="Xpath";   tempLocateValue=locatorWithValue;   locator=By.xpath(tempLocateValue);    }  else if(locatorWithValue.startsWith("xpath")||locatorWithValue.startsWith("Xpath"))  {   tempLocateBy ="xpath";   tempLocateValue=locatorWithValue.split(":")[1];   locator=By.xpath(tempLocateValue);    }   else if(locatorWithValue.startsWith("linkText")||locatorWithValue.startsWith("LinkText"))  {   tempLocateBy ="linkText";   tempLocateValue=locatorWithValue.split("=")[1];   locator=By.linkText(tempLocateValue);   }   return locator; } // WebDriver functions  public static void launchApp(String browsername, String url) {  try {   if(browsername.equalsIgnoreCase("firefox"))   {    driver =new FirefoxDriver();   }   else if(browsername.equalsIgnoreCase("chrome"))   {    ChromeOptions options = new ChromeOptions();    options.addArguments("chrome.switches","--disable-extensions");    System.setProperty("webdriver.chrome.driver", "./drivers/chromedriver.exe");    driver =new ChromeDriver(options);   }   else if(browsername.equals("ie"))   {    System.setProperty("webdriver.ie.driver",WebDriverGenerics.getPropValuesFromFile(ApplPropFilePath, "IEDriverPathV2"));    driver =new InternetExplorerDriver();   }else   {    Print_Util.logMessage("No browser is initated");   }   driver.manage().window().maximize();   driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);   driver.get(url);   ParentWindow=driver.getWindowHandle();  }   catch (Exception e)   {   Print_Util.logError("Application could not be Launched !!!");    }    } public static void entertextByIDJavaScript(String ID, String Value) {  try {   JavascriptExecutor jse = (JavascriptExecutor) driver;   jse.executeScript("document.getElementById('"+ID+"').value = '"+Value+"';");   Print_Util.logMessage("entertextByIDJavaScript :: Entered the text as :: "+Value );  } catch (Exception e) {     Print_Util.logError("entertextByIDJavaScript :: Unable to enter the text :: "+Value );   Print_Util.logError( e.getMessage() );  } }   public static void enterTextByJavaScript(String LocatorWithValue, String text) {   try {     element=driver.findElement(getElement(LocatorWithValue));   highLightElement(driver, element);   element.clear();   JavascriptExecutor myExecutor = ((JavascriptExecutor) driver);   myExecutor.executeScript("arguments[0].value='"+text+"';", element);   Print_Util.logMessage("enterTextByJavaScript :: Entered Value with JavaScript Executor as  ::  "+text );     } catch (Exception e) {     Print_Util.logError("enterTextByJavaScript :: Unable to enter the text :: "+text );   Print_Util.logError(e.getMessage());  }     }    public static void enterTextById(String id, String value) {  try {   element=driver.findElementById(id);   element.clear();   element.sendKeys(value);   Print_Util.logMessage("enterTextById :: value is entered in textbox " +value);  } catch (NoSuchElementException e) {   Print_Util.logError("The element with ID : "+id+" Could not be found");  } } public static void enterTextByName(String name, String value) {  try {   element=driver.findElementByName(name);   element.clear();   element.sendKeys(value);   Print_Util.logMessage("enterTextByName :: value is entered in textbox " +value);  } catch (NoSuchElementException e) {   Print_Util.logError("The element with Name : "+name+" Could not be found");  } } public static void enterTextByClassName(String ClassName, String value) {  try {   element=driver.findElementByClassName(ClassName);   element.clear();   element.sendKeys(value);   Print_Util.logMessage("enterTextByClassName :: value is entered in textbox " +value);  } catch (NoSuchElementException e) {   Print_Util.logError("The element with Name : "+ClassName+" Could not be found");  } } public static void enterTextByLinkText(String LinkText, String value) {  try {   element=driver.findElementByLinkText(LinkText);   element.clear();   element.sendKeys(value);   Print_Util.logMessage("enterTextByLinkText :: value is entered in textbox " +value);  } catch (NoSuchElementException e) {   Print_Util.logError("The element with Name : "+LinkText+" Could not be found");  } } public static void enterTextByXPath(String XPath, String value) {  try {   element=driver.findElementByXPath(XPath);   element.clear();   element.sendKeys(value);   Print_Util.logMessage("enterTextByXPath :: value is entered in textbox " +value);  } catch (NoSuchElementException e) {   Print_Util.logError("The element with Name : "+XPath+" Could not be found");  } } public static void enterTextByCssSelector(String CssSelector, String value) {  try {   element=driver.findElementByCssSelector(CssSelector);   element.clear();   element.sendKeys(value);   Print_Util.logMessage("enterTextByCssSelector :: value is entered in textbox " +value);  } catch (NoSuchElementException e) {   Print_Util.logError("The element with Name : "+CssSelector+" Could not be found");  } } public static void enterTextByTagName(String TagName, String value) {  try {   element=driver.findElementByTagName(TagName);   element.clear();   element.sendKeys(value);   Print_Util.logMessage("enterTextByTagName :: value is entered in textbox " +value);  } catch (NoSuchElementException e) {   Print_Util.logError("The element with Name : "+TagName+" Could not be found");  } } public static void enterText(String LocatorWithValue ,String value) {  try {   element=driver.findElement(getElement(LocatorWithValue));   highLightElement(driver, element);   //element.clear();   element.sendKeys(value);   Print_Util.logMessage("enterText :: value is entered in textbox " +value);     } catch (NoSuchElementException e) {   Print_Util.logError("The element with Name : "+LocatorWithValue+" Could not be found");  } } public static void clearText(String locatorWithValue) {  try {   element = driver.findElement(getElement(locatorWithValue));   highLightElement(driver, element);   element.clear();   Print_Util.tc_passed("Cleared the Value");  } catch (Exception e) {   Print_Util.logError("Not Cleared the Value"+ e.getMessage());  } } /**  * Click the webElement using below Wrapper Methods  * @param value  */ public static void clickByClassName(String value) {  try {   element=driver.findElementByClassName(value);   highLightElement(driver, element);   element.click();   Print_Util.logMessage("clickByClassName :: Element "+value +" is clicked");  } catch (NoSuchElementException e) {   Print_Util.logError("The element with clickByClassName : " + value + " could not be found !!");  } } public static void clickById(String value) {  try {   element=driver.findElementById(value);   highLightElement(driver, element);   element.click();   Print_Util.logMessage("clickById :: Element "+value +" is clicked");     } catch (NoSuchElementException e) {   Print_Util.logError("The element with clickById : " + value + " could not be found !!");  } } public static void clickByName(String value) {  try {   element=driver.findElementByName(value);   highLightElement(driver, element);   element.click();   Print_Util.logMessage("clickByName :: Element "+value +" is clicked");  } catch (NoSuchElementException e) {   Print_Util.logError("The element with clickByName : " + value + " could not be found !!");  } } public static void clickByXPath(String value) {  try {   element=driver.findElement(By.xpath(value));   highLightElement(driver, element);   element.click();   Print_Util.logMessage("clickByXPath :: Element "+value +" is clicked");        } catch (NoSuchElementException e) {   Print_Util.logError("The element with clickByXPath : " + value + " could not be found !!");  } } public static void clickByLinkText(String value) {  try {   element=driver.findElementByLinkText(value);   highLightElement(driver, element);   element.click();   Print_Util.logMessage("clickByLinkText :: Element "+value +" is clicked");   } catch (NoSuchElementException e) {   Print_Util.logError("The element with clickByLinkText : " + value + " could not be found !!");  } } public static void clickByCssSelector(String value) {  try {   element=driver.findElementByCssSelector(value);   highLightElement(driver, element);   element.click();   Print_Util.logMessage("clickByCssSelector :: Element "+value +" is clicked");     } catch (NoSuchElementException e) {   Print_Util.logError("The element with clickByCssSelector : " + value + " could not be found !!");  } } public static void clickByPartialLinkText(String value) {  try {   element=driver.findElementByPartialLinkText(value);   highLightElement(driver, element);   element.click();   Print_Util.logMessage("clickByPartialLinkText :: Element "+value +" is clicked");  } catch (NoSuchElementException e) {   Print_Util.logError("The element with clickByPartialLinkText : " + value + " could not be found !!");  } } public static void clickByTagName(String value) {  try {   element=driver.findElementByTagName(value);   highLightElement(driver, element);   element.click();   Print_Util.logMessage("clickByTagName :: Element "+value +" is clicked");  } catch (NoSuchElementException e) {   Print_Util.logError("The element with clickByTagName : " + value + " could not be found !!");  } } public static void click(String locatorWithvalue) {  try {   element=driver.findElement(getElement(locatorWithvalue));   highLightElement(driver,element);   element.click();   Print_Util.logMessage("Element Clicked with :" + locatorWithvalue);     } catch (NoSuchElementException e) {   Print_Util.logError("The element with clickByTagName : " + locatorWithvalue + " could not be found !!");  } } public static void ClickByJavaScript(String locatorWithValue) {  try {   element=driver.findElement(getElement(locatorWithValue));   highLightElement(driver, element);   ((JavascriptExecutor) driver).executeScript("arguments[0].click();", element);   Print_Util.logMessage("Element Clicked By JavaScript Executor with locator:" + locatorWithValue);     } catch (Exception e)   {   Print_Util.logError("Element Not Clicked By JavaScript Executor with locator: " + locatorWithValue);  } }  public static void ClickElementByJavaScript(WebElement element) {  try {      highLightElement(driver, element);   ((JavascriptExecutor) driver).executeScript("arguments[0].click();", element);   Print_Util.logMessage("Element Clicked By JavaScript Executor with element");     } catch (Exception e)   {   Print_Util.logError("Element Not Clicked By JavaScript Executor with element " );  } }   public static void doubleClick(String locatorWithvalue) {  element=driver.findElement(getElement(locatorWithvalue));  Actions act =new Actions(driver);    try {      highLightElement(driver,element);   act.doubleClick(element).build().perform();   Print_Util.logMessage("Element Double Clicked with :" + locatorWithvalue);       } catch (NoSuchElementException e) {   Print_Util.logError("Element is not double clicked with locator value " + locatorWithvalue);  } }  public static void moveToElementAndClick(String locatorWithvalue) {    element=driver.findElement(getElement(locatorWithvalue));  Actions act =new Actions(driver);  try {      highLightElement(driver,element);   act.moveToElement(element).click().build().perform();      Print_Util.logMessage("moveToElementAndClick :: Element Clicked with Mouse :" + locatorWithvalue);       } catch (NoSuchElementException e) {   Print_Util.logError("moveToElementAndClick :: Element not clicked with Mouse  " + locatorWithvalue);  } }  /*  * select Method is used to select the value from Dropdown*/ public static void selectByValue(String locatorWithValue, String value) {  element=driver.findElement(getElement(locatorWithValue));  highLightElement(driver, element);  Select St =new Select(element);  try   {   St.selectByValue(value);   Print_Util.logMessage("Element selected with selectByValue : "+value);     }  catch (ElementNotVisibleException ex)   {   Print_Util.logError("Element not selected with selectByValue : "+value);  } } public static void selectByVisibleText(String locatorWithValue, String value) {  element=driver.findElement(getElement(locatorWithValue));  highLightElement(driver, element);  Select St =new Select(element);  try   {   St.selectByVisibleText(value);   Print_Util.logMessage("Element Selected with VisibleText : "+value);     }  catch (ElementNotVisibleException ex)   {   Print_Util.logError("Element not selected with VisibleText : "+value);  } } public static void selectByIndex(String locatorWithValue, int index) {  try {   element=driver.findElement(getElement(locatorWithValue));   highLightElement(driver, element);   Select St =new Select(element);   St.selectByIndex(index);   Print_Util.logMessage("Element Selected at Index : "+index);        } catch (ElementNotVisibleException e) {   Print_Util.logError("Element not selected at Index : "+index);  } } /*acceptAlert method is used to Accept the alert*/ public static boolean isAlertPresent()  {      try      {          driver.switchTo().alert();          return true;      }   // try      catch (NoAlertPresentException Ex)      {          return false;      }   // catch  }   public static void acceptAlert() {  try {   Alert at =driver.switchTo().alert();   Print_Util.logMessage("driver Control moved to Alert");   at.accept();   Print_Util.logMessage("Alert present & accepted !!");    } catch (NoAlertPresentException e)   {   Print_Util.logError("No alert is found :: NoAlertPresentException");  } }  public static boolean acceptWindowAlert(WebDriver webdriver) {  String alertText = "NO TEXT";  try {   WebDriverWait wait = new WebDriverWait(webdriver, 30);   wait.until(ExpectedConditions.alertIsPresent());   // This will wait for a maximum of 5 seconds, everytime wait is used   // wait.until(ExpectedConditions.alertIsPresent());   // Before you try to switch to the so given alert, he needs to be   // present.   Alert alert = webdriver.switchTo().alert();   alertText = alert.getText();   Print_Util.ts_passed_ss("Getting Alert in the screen : [" + alertText + "]");   alert.accept();   return true;  } catch (NoAlertPresentException ex) {   Print_Util.ts_passed("No Alert Present");   return false;  } catch (TimeoutException e) {   Print_Util.ts_passed("Time out waiting for Alert");   return false;  } }  /*dismissAlert method is used to Dismiss the alert*/ public static void dismissAlert() {  try {   Alert at =driver.switchTo().alert();   Print_Util.logMessage("driver Control moved to Alert");   at.dismiss();   Print_Util.logMessage("Alert dismissed !!");     } catch (NoAlertPresentException e)  {   Print_Util.logError("No alert is found :: NoAlertPresentException");  } } /*getAlertText method is used to gettext form Alert and store in hashTable object at runtime*/  public static void alertGetText(String storeAlertTextInVariable) {  try {   Alert at =driver.switchTo().alert();   Print_Util.logMessage("driver Control moved to Alert");   hashMap.put(storeAlertTextInVariable, at.getText().toString());   Print_Util.logMessage("Alert Text stored in "+ storeAlertTextInVariable +" = " +at.getText().toString());      } catch (NoAlertPresentException e)  {   Print_Util.logError("No alert is found :: NoAlertPresentException");  } } /*alertSendKeys method is used to Send values to alert present*/ public static void alertSendKeys(String sendTextToAlert) {  try {   Alert at =driver.switchTo().alert();   Print_Util.logMessage("driver Control moved to Alert");   at.sendKeys(sendTextToAlert);   Print_Util.logMessage("Text is entered in alert :: "+sendTextToAlert);  } catch (NoAlertPresentException e)  {   Print_Util.logError("No alert is found :: NoAlertPresentException");  } } /*verifyUrl method is used to verify the current page URL with URL passed in arguments  *   * */ public static Boolean verifyCurrentUrl(String ExpectedURL) {  booleanValue =true;  try {   actualValue =driver.getCurrentUrl();   expectedvalue=ExpectedURL;   Print_Util.logMessage("verifyCurrentUrl:: Expected URL is "+expectedvalue);   Print_Util.logMessage("verifyCurrentUrl:: Actual URL is   "+actualValue);   if(actualValue.equals(expectedvalue))   {    Print_Util.logMessage("verifyCurrentUrl :: Actual and Expected URL is matched");    }else   {    Print_Util.logError("verifyCurrentUrl :: Actual and Expected URL is not matched");    booleanValue =false;   }  } catch (Exception e)   {   Print_Util.logError("verifyCurrentUrl :: Current page URL not found.");   Print_Util.logError(e.getMessage());  }  return booleanValue; } /* verifyPageTitle method is used to compare the application Title*/ public static Boolean verifyPageTitle(String ExpectedPageTitle) {  booleanValue =true;  try {   actualValue=driver.getTitle().toString();     if(actualValue.contains(ExpectedPageTitle))   {    Print_Util.logMessage("verifyPageTitle:: Expected and Actual value matches");       }else   {    Print_Util.logError("Expected and Actual Page Title not matches");    Print_Util.logMessage("Expected PageTitle is::" +ExpectedPageTitle);    Print_Util.logError("Actual PageTitle is::" +actualValue);    booleanValue=false;   }  } catch (WebDriverException e) {   Print_Util.logError("unable to get Current PageTitle from Browser ");   Print_Util.logError(e.getMessage());  }  return booleanValue; } /*  * verifyText * verifyPartialText   * method is used to verify Text*/ public static Boolean verifyText(String LocatorWithvalue ,String ExpectedText) {  booleanValue=true;  try {   expectedvalue=ExpectedText;   actualValue =driver.findElement(getElement(LocatorWithvalue)).getText().toString();   Print_Util.logDebug("Expected Text is :" + expectedvalue);   Print_Util.logDebug("Actual Text is   :" +  actualValue);     if(expectedvalue.equals(actualValue)|| expectedvalue.contains(actualValue))   {    Print_Util.logMessage("verifyText :: Expected and Actual Text matched");       }else   {    Print_Util.logError("verifyText :: Expected and Actual Text not matched");    booleanValue=false;   }  } catch (NoSuchElementException e)   {   Print_Util.logError("verifyText :: NoSuchElement is not found");  }  return booleanValue; } public static Boolean verifyPartialText(String LocatorWithvalue ,String ExpectedPartialText) {  booleanValue=true;  try {   expectedvalue=ExpectedPartialText;   actualValue =driver.findElement(getElement(LocatorWithvalue)).getText().toString();   Print_Util.logMessage("ExpectedPartialText is :" + expectedvalue);   Print_Util.logMessage("ActualText is   :" +  actualValue);     if(expectedvalue.contains(actualValue))   {    Print_Util.logMessage("verifyPartialText :: Expected and Actual PartialText matched");   }else   {    Print_Util.logError("verifyPartialText :: Expected and Actual PartialText not matched");    booleanValue=false;   }  } catch (NoSuchElementException e)   {   Print_Util.logError("verifyPartialText :: NoSuchElement is not found");  }  return booleanValue; } /*  * storeText method is used to store the Values at runTime */ public static void storeText(String LocatorWithValue, String key) {  try {   actualValue=driver.findElement(getElement(LocatorWithValue)).getText().toString();   if(! hashTable.contains(key))   {    hashTable.put(key, actualValue);    Print_Util.logMessage("Stroed Text in hashTable with Key and Value " +key +"::"+ actualValue);   }else   {    Print_Util.logError("Already key found in hashTable");   }  } catch (NoSuchElementException e) {   Print_Util.logError("The element could not found in page :"+LocatorWithValue);   Print_Util.logError("NoSuchElementException :: " +e.getMessage());  } }  /*  * verifyText method is used to verify text stored in hashTable*/  public static void verifyStoredText(String LocatorWithvalue ,String key) {  try {   String tempExpected =(String) hashTable.get(key);   actualValue =driver.findElement(getElement(LocatorWithvalue)).getText();   Print_Util.logMessage("Stored ExpectedText is :" + tempExpected);   Print_Util.logMessage("ActualText is   :" +  actualValue);   if(tempExpected.equals(actualValue)||tempExpected.contains(actualValue))   {    Print_Util.logMessage("verifyStoredText :: Expected and Actual Text matched");   }else   {    Print_Util.logError("verifyStoredText :: Expected and Actual Text not matched");   }  } catch (NoSuchElementException e)   {   Print_Util.logError("verifyStoredText :: Nosuch an element is not found");  } }  public static String getText(String locatorWithValue) {  String value="";  try {   element=driver.findElement(getElement(locatorWithValue));   highLightElement(driver, element);   WebDriverUtil.waitForPageLoaded(driver);   value =element.getText().toString();     WebDriverUtil.waitForPageLoaded(driver);   if(value.isEmpty()||value.equals(""))   {    value =element.getAttribute("value").toString();   }   Print_Util.logMessage("getText value is ::"+value  );     } catch (Exception e) {   Print_Util.logError("Exception caught at getText method :: element not found & unable to getText from element");   Print_Util.logError("Unable to locate" +locatorWithValue);     }  return value; } // Frame Handle /*switchToFirstFrame method is used to switch to frame by index value*/ public static void switchToFirstFrame(int index) {  try {   driver.switchTo().frame(index);     Print_Util.logMessage("driver control switched to frame by index :" +index);  } catch (NoSuchFrameException e) {   Print_Util.logError("No frame found with index : "+index);  } } /*switchToFrameByElement method is used to switch the driver into Frame by its element*/ public static void switchToFrameByElement(String LoactorWithValue) {  try {   element =driver.findElement(getElement(LoactorWithValue));   highLightElement(driver, element);   driver.switchTo().frame(element);   Print_Util.logMessage("driver control switched to frame by Element : " +LoactorWithValue);     } catch (NoSuchFrameException e) {   Print_Util.logError("No frame found with element : "+LoactorWithValue);  } } /*Switch to frame by name or id   * */ public void switchToFrame(String NameorID) {  try {   driver.switchTo().frame(NameorID);   Print_Util.logMessage("driver control switched to frame by NameorID : " +NameorID);  } catch (Exception e) {   Print_Util.tc_debug("Not Able to switch to Frame" + e.getMessage());   driverScript.bResult = false;  } } public static void frameDefaultContent() {  try {   driver.switchTo().defaultContent();   Print_Util.logMessage("Switched to frame DefaultContent....! ");  } catch (NoSuchFrameException e) {   Print_Util.logError("Unable to switch back to default content ");  } } /*Declare ParentWindow in class level and Store the parentWindow in lauchApp method*/ public static void switchToPrimaryWindow() {  try {   driver.switchTo().window(ParentWindow);   Print_Util.logMessage("switchToPrimaryWindow :: executed succesfully.");  } catch (NoSuchWindowException e) {   Print_Util.logMessage("No such a window present to switch");  } }  /*switchToPrimaryWindow method is used to switch the control to primary window*/ public static void switchToPrimaryWindow(String SwitchToparentWin) {  try {   driver.switchTo().window(SwitchToparentWin);   Print_Util.logMessage("switchToPrimaryWindow(String SwitchToparentWin) :: executed succesfully.");  } catch (NoSuchWindowException e) {   Print_Util.logError("No window present to switch" +SwitchToparentWin);  } }  /*storePrimaryWindow method is used to store the parent URL*/ public static void storePrimaryWindow(String KeyforParentWindow) {  try {   if(! hashTable.contains(KeyforParentWindow))   {    hashTable.put(KeyforParentWindow, driver.getWindowHandle());        Print_Util.logError("storePrimaryWindow :: primaryWindow address is stored in hashtable with key & Value as :: "+KeyforParentWindow +" & " +driver.getWindowHandle().toString());   }else   {    Print_Util.logError("Key already found in hashtable : "+KeyforParentWindow);   }  } catch (NoSuchWindowException e) {   Print_Util.logError(e.getMessage());  } } public static void switchToLastWindow() {  try {   Set<String> windows = driver.getWindowHandles();   int winSize = windows.size();   Print_Util.logMessage("Number of windows to handle is : " + winSize);   int i = 1;   for (String window : windows) {    driver.switchTo().window(window);    Print_Util.logMessage("Window no :: " + i + " and "      + driver.getCurrentUrl());    i++;   }  } catch (NoSuchWindowException e) {      Print_Util.logError("NoSuchWindowException :: No child window found to handle. " );     } }   /**  * isDisplayed method is used to check whether element is present or not  */  public static Boolean isDisplayed(String LocatorWithValue) {  booleanValue = false;  try {   element=driver.findElement(getElement(LocatorWithValue));   highLightElement(driver, element);   if(element.isDisplayed())   {    Print_Util.logMessage("Element is Displayed");    booleanValue=true;   }  }  catch (Exception e)  {   Print_Util.logError("Element could not be found with :" +LocatorWithValue);  }  return booleanValue ; }  /**  * isEnabled method is used to check whether element is Enabled in webPage or not  * @param LocatorWithValue  * @return  */ public static Boolean isEnabled(String LocatorWithValue) {  booleanValue= false;  try {   element=driver.findElement(getElement(LocatorWithValue));   highLightElement(driver, element);   if(element.isEnabled())   {    Print_Util.logMessage("Element is enabled.");    booleanValue=true;   }  }  catch (ElementNotVisibleException e)  {   Print_Util.logError("Element could not be found with :" +LocatorWithValue);  }  return booleanValue ; }  /**  * IsSelected Method is used to check whther element is Selected in page or not  * @param LocatorWithValue  * @return  */  public static Boolean isSelected(String LocatorWithValue) {  booleanValue = false;  try {   element=driver.findElement(getElement(LocatorWithValue));   highLightElement(driver, element);   if(element.isSelected())   {    Print_Util.logMessage("Element is selected.");    booleanValue=true;   }  }  catch (Exception e)  {   Print_Util.logError("Element could not be found with :" +LocatorWithValue);  }  return booleanValue ; }  public static void setWindowSize(int winWidth ,int winHeight) {  try {   Dimension dim = new Dimension(winWidth, winHeight);   driver.manage().window().setSize(dim);  } catch (Exception e) {   Print_Util.logMessage("Window is not resized by setWindowSize method");  } } public static void deleteAllCookies() {  try {   driver.manage().deleteAllCookies();   Print_Util.logMessage("deleteAllCookies :: Deleted all cookies from browser");  } catch (Exception e) {   Print_Util.logError("Cookies not cleared !");  } } public static void browserBack() {  try {   driver.navigate().back();   Print_Util.logMessage("Browser navigated to back ");  } catch (WebDriverException e) {   Print_Util.logError("Browser not navigated to back due to exception :: " +e.getMessage());  } } public static void browserForward() {  try {   driver.navigate().forward();   Print_Util.logMessage("Browser navigated to Forward ");  } catch (WebDriverException e) {   Print_Util.logError("Browser not navigated to forwarded due to exception :: " +e.getMessage());  } } public  static void refreshPage() {  try {   driver.navigate().refresh();   WebDriverUtil.waitForPageLoaded(driver);   Print_Util.logMessage("Browser refreshed");     } catch (WebDriverException e) {      Print_Util.logError("Browse not refreshed !");  } }  public static void navigateToURL(String URL) {  // driver=new InternetExplorerDriver();  try {   driver.navigate().to(URL);   waitFor(5000);   WebDriverUtil.waitForPageLoaded(driver);   // log.info("navigating to URL");  } catch (Exception e) {   Print_Util.logMessage("navigateToURL :: Not Able to Navigate to the URL" + e.getMessage());   driverScript.bResult = false;  } }  /**  * closeBrowser method is used to close the Web driver browser  */ public static void closeBrowser() {  try {   driver.close();   Print_Util.logMessage("Browser closed successfully");   } catch (WebDriverException e) {   Print_Util.logError("Not Able to Close the Browser" + e.getMessage());   driverScript.bResult = false;  } }  /**  * quitBrowser method is used to quit the Web driver browser  */ public static void quitBrowser() {  Print_Util.logMessage("Browser Quited !!");  driver.quit(); } public static String getHashTableValue(String key) {  Object value =hashTable.get(key);  System.out.println("getHashTableValue value :: "+ value.toString());  return  value.toString(); }  public static String getHashMap(String key) {  Object value =hashMap.get(key);  System.err.println("From HashMap --> "+key +" value is :: "+ value.toString());  return value.toString(); }  public static String getHashMap_Locator(String key) {  Object value =hashMap_locator.get(key);  System.err.println("From HashMap --> "+key +" value is :: "+ value.toString());  return value.toString(); }  /**  * Used to take Screenshots  * @param imgName  */  public static void takeScreenShot(String imgName)  {  Date date =new Date();  SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH-mm-ss") ;  File file = new File("./Screenshot/"+imgName+"_"+dateFormat.format(date)) ;  file.mkdir();  String newFolderName=file.getName();  File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);  try   {   FileUtils.copyFile(scrFile, new File("./Screenshot/"+newFolderName+"/"+imgName+".png"));  }  catch (IOException e)  {   Print_Util.logError("Screenshot not taken...");  } } // Wait methods public static void waitFor() throws Exception {  try {   Thread.sleep(5000);   writeLine("waitFor method complete");     } catch (Exception e) {   Print_Util.tc_debug("waitFor method Exception" + e.getMessage());   driverScript.bResult = false;  } }  public static void waitFor(int time) throws Exception {  try {   Thread.sleep(time);   writeLine("waitFor method complete");  } catch (Exception e) {   Print_Util.tc_debug("waitFor method Exception" + e.getMessage());   driverScript.bResult = false;  } }   public static void sleep(int sleepSeconds)  {  try {   Thread.sleep(sleepSeconds);   Print_Util.logMessage("Thread.sleep completed");  } catch (InterruptedException e) {   Print_Util.logError("Timeout Exception");  } }  // Function to switch to Default Frame // Function used to highlight element at runtime public static  void highLightElement(WebDriver driver, WebElement element) {  JavascriptExecutor js=(JavascriptExecutor)driver;   js.executeScript("arguments[0].setAttribute('style', 'background: yellow; border: 3px solid red;');", element);  try   {   Thread.sleep(500);  }   catch (InterruptedException e) {   System.out.println(e.getMessage());  }   js.executeScript("arguments[0].setAttribute('style','border: solid 2px white')", element);  }  // WebTable concepts //To get Webtable row count public static int getWebTableRowCount( String LocatorwithValue) {   int size=0;  try {   // Getting Table name   element = driver.findElement(getElement(LocatorwithValue));   highLightElement(driver, element);   // Getting row count   ListofElements = element.findElements(By.tagName("tr"));   size = ListofElements.size();   Print_Util.logMessage("getWebTableRowCount :: Number of rows is : "+size);     } catch (Exception e) {   EXCEPTION_OR_FAILURE_MESG="Exception catched in getWebTableRowCount method";   Print_Util.logError("getWebTableRowCount :: webtable not found..");  }  return size; } // Get Webtable value from any particular row  public static String getValuesFromWebTable(String tableXpath, int rowNumber) {   StringBuilder sbColumn= new StringBuilder();    WebElement webtable=driver.findElement(getElement(tableXpath));  highLightElement(driver, webtable);  // Getting row count    List<WebElement> rows = webtable.findElements(By.tagName("tr"));  Print_Util.logError("table Row Size is : "+rows.size());   //for (int i=1; i<rows.size();i++)   List<WebElement> cells =rows.get(rowNumber).findElements(By.tagName("td"));  String appendStringValue="";  for(int j=0; j<cells.size();j++)  {   String actualData =cells.get(j).getText(); // getting 1st row j column value   highLightElement(driver, cells.get(j));   appendStringValue =sbColumn.append(actualData).append("##").toString();  }  Print_Util.logError("UI webTable value from rownumber " +rowNumber+ " is :: "+appendStringValue);  IPMcomm.logMessage(IPMcomm.TEST_STEP, IPMcomm.DEBUG_PRINT,"UI webTable value from rownumber " +rowNumber+ " is :: "+appendStringValue);  return appendStringValue;   } // Get DB values from Database  public static String getvaluesFromDB(String DB_URL, String DB_Username, String DB_Password, int columnCount ,String SqlQuery, int getDBValuefromRowNumber) throws Exception {  Class.forName("oracle.jdbc.driver.OracleDriver");  // Get connection to DB  boolean isTestRunningInIPM = (IPMcomm.importParam("ENGINE") != null&& !IPMcomm.importParam("ENGINE").isEmpty() && IPMcomm.importParam("ENGINE").equals("IPM"));  if (!isTestRunningInIPM) {   TestCaseBO.setDbpassword(PasswordEncrypt.decrypt(DB_Password));  } else {   TestCaseBO.setDbpassword(DB_Password);  }     con = DriverManager.getConnection(DB_URL, DB_Username, TestCaseBO.getDbpassword());  // Statement object to send the SQL statement to the Database  Statement stmt = con.createStatement();  ResultSet res = stmt.executeQuery(SqlQuery);  int count=columnCount;  StringBuilder sb =null;  int j=1;  while (res.next())   {        sb  =new StringBuilder();   String appendstring ="";   for( int i=1;i<=count;i++)   {    Object DBdata =res.getObject(i);    appendstring= sb.append(DBdata).append("##").toString();     }     hashTable.put(j, appendstring.toString());   j++;  }     Print_Util.logError("DB value :: "+hashTable.get(getDBValuefromRowNumber).toString());  IPMcomm.logMessage(IPMcomm.TEST_STEP, IPMcomm.DEBUG_PRINT,"DB value :: "+hashTable.get(getDBValuefromRowNumber).toString());  return hashTable.get(getDBValuefromRowNumber).toString() ; }   // to compare UI values with DB values  public static boolean verifyUIValuesWithDB(String DbDatas, String UIDatas) {    boolean value =true;  int DBLength=DbDatas.split("##").length;  int UILength=UIDatas.split("##").length;  List<String> DB =new ArrayList<String>();  List<String> UI =new ArrayList<String>();  // Clearing DB list & Storing values  DB.clear();  for(int i=0; i<DBLength;i++)  {   String DBValue=DbDatas.split("##")[i];    DB.add(DBValue);  }  // Clearing UI list & Storing values  UI.clear();  for(int j=0;j<UILength;j++)  {   String UIValue=UIDatas.split("##")[j];    UI.add(UIValue);  }   // Comparing DB values present in UI or not   for(int k=0;k<DBLength;k++)  {   String actualDbdata=DB.get(k).toString();   if(UI.toString().contains(actualDbdata))   {    Print_Util.logMessage("UI values Matched with DB values");    IPMcomm.logMessage(IPMcomm.TEST_STEP, IPMcomm.PASSED,"UI values Matched with DB values");      }else   {    Print_Util.logMessage("UI values Not Matched with DB values");    IPMcomm.logMessage(IPMcomm.TEST_STEP, IPMcomm.FAILED,"UI values Not Matched with DB values");     value=false;   }  }  return value; } // Function to click download link & save file in Downloads using AutoIt Script. public static String clickAndSaveFileIE(WebElement element) throws Exception {  String excelFileName="";  String directory="C:\\ipmqc";  //String directory=System.getProperty("user.home")+"\\Downloads";  try {   // Deleting existing files   Print_Util.logError("Calling DeleteAllFilesFromDirectory() function to detele existing files from path # "+ directory);         //OnePlan_Util.DeleteAllFilesFromDirectory(directory);   // clicking link to download   Print_Util.logMessage("click link to download file is displayed "+element.isDisplayed());   highLightElement(driver, element);   Actions act =new Actions(driver);   act.doubleClick(element).perform();   Print_Util.logError("Download link clicked & waiting for popup..! ");   waitFor();   Print_Util.logError("IE browser download popup visible and handling with Autoit Scripts...! ");   IPMcomm.logMessage(IPMcomm.TEST_CASE, IPMcomm.DEBUG_PRINT,"IE browser download popup visible and handling with Autoit Scripts...! ");   // Autoit EXE Called...   //Runtime.getRuntime().exec(OnePlan_Util.getDataFromIPMOrProp(ApplPropFilePath,"IEDownloadHandleExe"));   Thread.sleep(22000);   // readTextFile();   Print_Util.logError("Autoit Script end...");   IPMcomm.logMessage(IPMcomm.TEST_CASE, IPMcomm.DEBUG_PRINT,"Autoit Script end...");   Print_Util.logError("Getting Driver instance :: "+driver.toString());   Print_Util.logError("Calling getAbsolutePathOfDownloadedFile() method :: getting excel file name from path # "+ directory);   // excelFileName = OnePlan_Util.getAbsolutePathOfDownloadedFile(directory);         }   catch (Exception e)  {   System.out.println(e.getMessage());   IPMcomm.logMessage(IPMcomm.TEST_CASE, IPMcomm.DEBUG_PRINT,"IE browser Download popUp is not handled... ");  }  return excelFileName;     } // Function to verify Excel data with UI Value   @SuppressWarnings("resource") public static boolean compareExcelValueWithGUIData(String GUIData, String Excelpath, int rowNo) throws IOException   {  driverScript.bResult=true;  // get UI Data using getValuesFromWebTable();   File file = new File(Excelpath);  Print_Util.logError("reading data from Excel File ----> "+Excelpath);  FileInputStream fis=null;  try {   fis = new FileInputStream(file);  } catch (FileNotFoundException e1) {   Print_Util.logError("Excel File Not Found in path::::::>>>>"+ Excelpath);   Print_Util.logError(e1.getMessage());  }  HSSFWorkbook wb = new HSSFWorkbook(fis);  HSSFSheet sh =wb.getSheetAt(0);  // get column count for provided row number   int cellCount=sh.getRow(rowNo).getLastCellNum();  StringBuilder sb1= new StringBuilder();  String Excelappendvalue = "" ;  for(int i=0;i<cellCount;i++)  {   Object getData="";   try {    getData = sh.getRow(rowNo).getCell(i).getStringCellValue();    //Print_Util.logError("Excel data :"+getData);   } catch (Exception e) {    getData = sh.getRow(rowNo).getCell(i).getNumericCellValue();    //Print_Util.logError("Excel data :"+getData);   }   Excelappendvalue =sb1.append(getData).append("##").toString();  }  Print_Util.logError("Read Data from excel file row number "+rowNo+ " is : "+Excelappendvalue);  Print_Util.logError("Provided Data from GUI is : "+GUIData);  // String UI & Excel Data in List & Comparing values   int ExcelDataLength=Excelappendvalue.split("##").length;  int GUILength=GUIData.split("##").length;  List<String> ExcelData =new ArrayList<String>();  List<String> GUI =new ArrayList<String>();  // Clearing DB list & Storing values  ExcelData.clear();  for(int i=0; i<ExcelDataLength;i++)  {   String ExcelValue=Excelappendvalue.split("##")[i];    ExcelData.add(ExcelValue);  }  // Clearing UI list & Storing values  GUI.clear();  for(int j=0;j<GUILength;j++)  {   String UIValue=GUIData.split("##")[j];    GUI.add(UIValue);  }   // Comparing DB values present in UI or not   for(int k=0;k<ExcelDataLength;k++)  {   String actualExceldata=ExcelData.get(k).toString();   String actualUIdata=GUI.get(k).toString();   if(actualExceldata.contains(actualUIdata))   {    Print_Util.logMessage("UIvalues: ("+actualUIdata+") Matched with Excelvalue: ("+actualExceldata+")");    IPMcomm.logMessage(IPMcomm.TEST_STEP, IPMcomm.PASSED,"UIvalues: ("+actualUIdata+") Matched with Excelvalue: ("+actualExceldata+")");      }else   {    Print_Util.logError("UIvalues: ("+actualUIdata+") Not Matched with Excelvalue: ("+actualExceldata+")");    IPMcomm.logMessage(IPMcomm.TEST_STEP, IPMcomm.FAILED,"UIvalues: ("+actualUIdata+") Not Matched with Excelvalue: ("+actualExceldata+")");     driverScript.bResult=false;   }  }  return driverScript.bResult; } public static WebElement findelement(String locatorWithValue) {  element=driver.findElement(getElement(locatorWithValue));  highLightElement(driver, element);  return element; } public static List<WebElement> getOptions(String locatorWithValue) {  element=driver.findElement(getElement("locatorWithValue"));  highLightElement(driver, element);  try {   Select st = new Select(element);   ListofElements = st.getOptions();  } catch (Exception e) {   Print_Util.logError("ElementNotSelectableException occured...!");  }  return ListofElements; } public static String getFirstSelectedOption(String locatorWithValue) {  String selectedValue="";  try {   element=driver.findElement(getElement(locatorWithValue));   highLightElement(driver, element);   Select St =new Select(element);   element=St.getFirstSelectedOption();   selectedValue=element.getText().toString();   Print_Util.logMessage("SelectedValue from DropDown is :: "+selectedValue );   Print_Util.tc_passed("SelectedValue from DropDown is :: "+selectedValue );  } catch (Exception e) {   Print_Util.logError("Exception caught at getFirstSelectedOption method :: element not selectable");   Print_Util.tc_failed("Exception caught at getFirstSelectedOption method :: element not selectable");  }  return selectedValue; }  public static void writeLine(String Text) {  System.out.println(Text);   } public static void writeError(String Text) {  System.err.println(Text);  }  public static boolean isElementVisible(String locatorWithValue) {  driverScript.bResult=true;  Print_Util.logMessage("Inside isElementVisible method ");  try {   element=driver.findElement(getElement(locatorWithValue));   highLightElement(driver, element);   WebDriverUtil.waitForPageLoaded(driver);   if(element.isDisplayed()&&element!=null)   {    Print_Util.logMessage("isElementVisible value is :: true"  );       }else   {    Print_Util.logError("isElementVisible value is :: False"  );    driverScript.bResult=false;   }  } catch (Exception e) {   Print_Util.logError("Exception caught at isElementVisible method :: elementnotvisibleexception " + e.getMessage());  }  return driverScript.bResult; }  public static void IE_killProcessFromTaskManager() throws Exception {  // Used to Kill IEDriverServer exe from Window Task manager.  final String KILL = "taskkill /IM ";  String processName = "IEDriverServer.exe"; //IE process  Runtime.getRuntime().exec(KILL + processName);   waitFor(3000); //Allow OS to kill the process  Print_Util.logMessage("Killed :: IE_killProcessFromTaskManager "); }  public static void scrollElementIntoView(WebElement Element) throws Exception {  // used to scroll the element into view   ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", Element);  highLightElement(driver, Element);  waitFor(500); } // Function to select the check box value public void SelectCheckboxValue(String locatorWithValue) {  try {   element= driver.findElement(getElement(locatorWithValue));   highLightElement(driver, element);   element.click();   Print_Util.logMessage("Checkbox clicked");  } catch (Exception e) {   Print_Util.logError("Not Able to Click the checkbox" + e.getMessage());   driverScript.bResult = false;  } } // Method to Read data from sheet // Sample Data account_cd##1A@@fttp_flag##Y@@material##1234@@ipid##1545 public static HashMap<String, String> readData(String data) {  try{   Print_Util.tc_debug("sPageData:::" + data);    hashMap = new HashMap<String,String>();   //added by meenakshi so that the hash map variable do not hold the previous value   if (data.contains("@")) {    String[] DataList = data.split("@@");    // System.out.println(DataList[0]+" "+DataList[1]);    // Print_Util.logMessage("DataList" + DataList.length);    for (int i = 0; i < DataList.length; i++) {     String[] DataSecond = DataList[i].split("##");     hashMap.put(DataSecond[0], DataSecond[1]);     // Print_Util.logMessage("DataSecond[0],     // DataSecond[1]"+DataSecond[0]+" "+ DataSecond[1]);    }    /*     * Iterator<String> keyIterator = hm.keySet().iterator();     * Iterator<String> valueIterator = hm.values().iterator();     *      * while (keyIterator.hasNext()) { Print_Util.logMessage("key: " +     * keyIterator.next()); }     *      * while (valueIterator.hasNext()) { Print_Util.logMessage("value: " +     * valueIterator.next()); }     */   } else {    String[] DataSecond = data.split("##");    hashMap.put(DataSecond[0], DataSecond[1]);    // Print_Util.tc_debug("DataSecond[0], DataSecond[1]"+DataSecond[0]+"    // "+ DataSecond[1]);   }  }catch(Exception e){   e.printStackTrace();  }  return hashMap; } public static void closeChildWindow(){  Print_Util.ts_debug("Size of Windows:::" + driver.getWindowHandles().size());  if(  driver.getWindowHandles().size()>1)  {   driver.close();   Print_Util.ts_debug("Closing the Child window:::");   driver.switchTo().window("");  } } public static String getDataFromIPMOrProp(String FilePath, String key) {  String returnValue =null;  if (IPMcomm.importParam(key) != null && !IPMcomm.importParam(key).isEmpty()) {   returnValue = IPMcomm.importParam(key);   // System.out.println("Reading Data from IPM for Key : " + key   // +" --> Value : " +returnValue );  } else {   returnValue = getPropValuesFromFile(FilePath, key).trim();  }  return returnValue; }// public static String getPropValuesFromFile(String filePath, String key1) {//  String returnValue = null;//  try {//   Properties properties = new Properties();//   InputStream stream = WebDriverGenerics.class.getClassLoader().getResourceAsStream(filePath);//   properties.load(stream);//   Enumeration<?> enuKeys = properties.keys();//   while (enuKeys.hasMoreElements()) {//    String key = (String) enuKeys.nextElement();//    String value = properties.getProperty(key);//    if (key.equals(key1)) {//     System.out.println("Reading Data from Properties file for Key : " + key1 + " --> Value : " + value);//     returnValue = value;//     break;//    }//   }//  } catch (Exception e) {//   IPMcomm.logMessage(IPMcomm.TEST_STEP, IPMcomm.FAILED,//     "Key not present in properties file " + key1 + " Value " + returnValue, "");//   e.printStackTrace();////  }//  return returnValue;// } public static synchronized void waitUntilElementDisapper(WebDriver driver, String name) {  String regex = "(" + name.trim() + ")";  Pattern pattern = Pattern.compile(regex);  while (true) {   Matcher m = pattern.matcher(driver.getPageSource());   if (m.find()) {    // System.out.println("Loading ......................");    continue;   } else {    System.out.println("stoped  ......................");    break;   }  } }  public static WebElement waitUntilElementPresent( final String locator)  {  Wait<WebDriver> wait = new FluentWait<WebDriver>(driver).withTimeout(30, TimeUnit.SECONDS)    .pollingEvery(1, TimeUnit.SECONDS).ignoring(NoSuchElementException.class)    .ignoring(StaleElementReferenceException.class);  WebElement foo = wait.until(new com.google.common.base.Function<WebDriver, WebElement>() {   public WebElement apply(WebDriver driver) {    System.out.println(" Waiting for element:" + locator);    WebElement findElement = driver.findElement(By.xpath(locator));    if (findElement.isDisplayed() & findElement.isEnabled())     return findElement;    return findElement;   }  });  return foo; } public static WebElement waitUntilElementPresent(final WebDriver driver, final String locator,   final int timeoutinseconds, final int pollingenveryseconds) {  Wait<WebDriver> wait = new FluentWait<WebDriver>(driver).withTimeout(timeoutinseconds, TimeUnit.SECONDS)    .pollingEvery(pollingenveryseconds, TimeUnit.SECONDS).ignoring(NoSuchElementException.class)    .ignoring(StaleElementReferenceException.class);  WebElement foo = wait.until(new com.google.common.base.Function<WebDriver, WebElement>() {   public WebElement apply(WebDriver driver) {    System.out.println(" Waiting for element:" + locator);    WebElement findElement = driver.findElement(By.xpath(locator));    if (findElement.isDisplayed() & findElement.isEnabled())     return findElement;    return findElement;   }  });  return foo; } public static void waitUntilElementIsnotDisplayed(final WebDriver driver, final String locator) {  while (true) {   try {    WebElement findElement = waitUntilElementPresent(driver, locator, 5, 1);    if (findElement != null && findElement.isDisplayed()) {     System.out.println(" Loading screen continue ");     continue;    } else {     System.out.println("break");     break;    }   } catch (Exception e) {    break;   }  } }  public static String getPropValuesFromFile(String filePath, String key1)  {  String Value="";  propertiesFileUtils.setPropertyPath(filePath);  Value = propertiesFileUtils.getProp(key1).trim();    System.out.println("getDataFromIPMOrProp :: Key --> "+key1 +" ## "+ "Value --->" +Value);  return Value; }}
